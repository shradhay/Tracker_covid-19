{"version":3,"sources":["InfoBox.js","utl.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js","Images/corona.png"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","className","onClick","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","showDataOnMap","Table","LineGraph","App","useState","setCountries","setCountry","setCountryInfo","TableData","setTableData","lng","mapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","useEffect","fetch","then","response","json","name","value","iso2","getCountriesData","onCountryChange","event","countryCode","target","src","corona","alt","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","CardContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.1a3ca6ec.chunk.js","sourcesContent":["import React from 'react'\r\nimport {\r\n    Card,\r\n    Cardcontent,\r\n    Typography\r\n\r\n} from \"@material-ui/core\"\r\nimport \"./Infobox.css\"\r\n\r\nconst InfoBox=({ title, cases, total, active, isRed, ...props })=>{\r\n    return(\r\n        <div>\r\n            <Card className=\"infoBox\"\r\n             onClick={props.onClick}\r\n             className={`infoBox ${active && \"infoBox--selected\"} ${\r\n               isRed && \"infoBox--red\"\r\n             }`}>\r\n                \r\n               <Typography  className=\"infoBox_title\" color=\"textSecondary\">\r\n                   {title}\r\n               </Typography>\r\n\r\n                 <h2 className=\"infoBox_cases\">{cases}</h2>\r\n\r\n                 <Typography className=\"infoBox_total\" color=\"textSecondary\">\r\n                      {total} Total\r\n                 </Typography>\r\n            </Card>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default InfoBox;","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from 'react'\r\n\r\nimport { Map as LeafletMap ,TileLayer } from 'react-leaflet'\r\nimport \"./Map.css\"\r\n\r\nimport {showDataOnMap} from \"./utl\"\r\n\r\nfunction Map({countries,casesType,center,zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap  className=\"leaflet-div\" center={center} zoom={zoom} >\r\n            <TileLayer\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n              />\r\n\r\n               \r\n            {showDataOnMap(countries,casesType)}\r\n\r\n            </LeafletMap>\r\n           \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css'\r\nimport numeral from \"numeral\"\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {\r\n                countries.map(({country,cases}) => (\r\n                    <tr>\r\n                        <td>{country}</td>\r\n                         <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                   </tr>\r\n                ))\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import { TextField } from '@material-ui/core'\r\nimport React,{useEffect,useState} from 'react'\r\nimport {Line,Typography} from \"react-chartjs-2\"\r\n\r\n\r\nexport default function LineGraph() {\r\n\r\n    \r\n   \r\n    return (\r\n        <div className=\"LineGraph\">\r\n           <ul>\r\n               <li>Use Mask</li>\r\n               <li> Follow Social Distancing</li>\r\n               <li>Wash hand Frequently</li>\r\n\r\n           </ul>\r\n           \r\n      \r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react'\nimport { FormControl, MenuItem ,Select} from '@material-ui/core'\nimport InfoBox from \"./InfoBox\"\nimport \"./Style.css\"\nimport Map from \"./Map\"\nimport {Card,CardContent} from \"@material-ui/core\"\nimport Table from \"./Table\"\nimport   { sortData } from \"./utl\"\nimport LineGraph from \"./LineGraph\"\nimport 'leaflet/dist/leaflet.css';\nimport numeral from \"numeral\"\nimport corona from \"./Images/corona.png\"\n \n\nconst App =()=>{\n    \n   const [countries, setCountries] = useState([])\n   const [country, setCountry] = useState('worldwide')\n   const [countryInfo, setCountryInfo] = useState({})\n   const [TableData, setTableData] = useState([])\n   const [mapCenter, setMapCenter] = useState({lat: 20.5937,lng: 78.9629 });\n   const [mapZoom, setMapZoom] = useState(3)\n   const [mapCountries, setMapCountries] = useState([])\n   const [casesType, setCasesType] = useState(\"cases\");\n  \n  useEffect(() => {\n\n   fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response)=> response.json())\n    .then((data)=> {\n        setCountryInfo(data);\n    });\n     \n  }, []);\n  \n  useEffect(() => {\n      const getCountriesData = async ()=>{\n         fetch (\"https://disease.sh/v3/covid-19/countries\")\n          .then((response) => response.json())\n          .then((data)=>{\n             const countries = data.map((country)=>(\n                 {\n                     name:country.country,\n                     value:country.countryInfo.iso2,\n                 }));\n                 let sortedData= sortData(data)\n                 setCountries(countries);\n                \n                 setMapCountries(data);\n                 setTableData(sortedData);\n                \n                \n                })\n      };\n      getCountriesData();\n   },[]);\n    const onCountryChange =async (event) =>{\n        const countryCode = event.target.value;\n      \n\n        const url = countryCode === 'worldwide' ? \"https://disease.sh/v3/covid-19/all\" : \n        `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n        \n\n        await fetch(url)\n        .then(response => response.json())\n        .then( data => {\n            setCountry(countryCode)\n            setCountryInfo(data);\n            // setMapCenter([data.countryInfo.lat,data.countryInfo.long]);\n            setMapZoom(4);\n\n\n        })\n    }\n    return(\n        <>\n        \n\n        <div className=\"app\">\n        <div className=\"app_left\">\n        <div className=\"app_header\">\n        <img src={corona} alt=\"corona_img\" />\n           <h1> <span>COVID-19</span> TRACKER</h1>\n            <FormControl className=\"app_dropdown\">\n                <Select\n                variant=\"outlined\"\n                value={country}\n                onChange={onCountryChange}\n                >\n                    <MenuItem value='worldwide'\n                     onChange={onCountryChange}\n                    >Worldwide</MenuItem>\n                    {countries.map(country=>(\n                        <MenuItem value={country.value}>{country.name}</MenuItem>\n                    )\n\n                    )}\n                   \n                </Select>\n            </FormControl>\n            </div>\n\n            <div className=\"app_stats\">\n                <InfoBox \n                onClick={(e) => setCasesType(\"cases\")}\n\n                title=\"Coronavirus Cases\"\n                isRed\n                cases={numeral(countryInfo.todayCases).format(\"0,0\")}\n                total={numeral(countryInfo.cases).format(\"0,0\")}\n                />\n\n                <InfoBox \n                onClick={(e) => setCasesType(\"recovered\")}\n                title=\"Recovered\"\n                cases={numeral(countryInfo.todayRecovered).format(\"0,0\")}\n                total={numeral(countryInfo.recovered).format(\"0,0\")}\n                />\n\n                <InfoBox title=\"Deaths\"\n                title=\"Deaths\"\n                isRed\n                 onClick={(e) => setCasesType(\"deaths\")}\n                cases={numeral(countryInfo.todayDeaths).format(\"0,0\")}\n                 total={numeral(countryInfo.deaths).format(\"0,0\")}\n                />\n\n            </div>\n\n            <Map \n            countries={mapCountries}\n            casesType={casesType}\n            center={mapCenter}\n            zoom={mapZoom}\n            />\n\n        </div>\n\n        <Card className=\"app_right\">\n            <CardContent className=\"app_right_card\">\n                <h3> Live cases by country </h3>\n                <h3> Worldwide country </h3>\n                <Table countries={TableData}/>\n                <br></br>\n                <h3>Instruction</h3>\n                \n                <br></br>\n                <LineGraph/>\n             </CardContent>\n\n         </Card>\n\n       </div>\n        </>\n        \n    )\n}\nexport default  App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/corona.ece115d1.png\";"],"sourceRoot":""}